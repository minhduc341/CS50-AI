import os
import random
import re
import sys

DAMPING = 0.85
SAMPLES = 10000


def main():
    if len(sys.argv) != 2:
        sys.exit("Usage: python pagerank.py corpus")
    corpus = crawl(sys.argv[1])
    ranks = sample_pagerank(corpus, DAMPING, SAMPLES)
    print(f"PageRank Results from Sampling (n = {SAMPLES})")
    for page in sorted(ranks):
        print(f"  {page}: {ranks[page]:.4f}")
    ranks = iterate_pagerank(corpus, DAMPING)
    print(f"PageRank Results from Iteration")
    for page in sorted(ranks):
        print(f"  {page}: {ranks[page]:.4f}")


def crawl(directory):
    """
    Parse a directory of HTML pages and check for links to other pages.
    Return a dictionary where each key is a page, and values are
    a list of all other pages in the corpus that are linked to by the page.
    """
    pages = dict()

    # Extract all links from HTML files
    for filename in os.listdir(directory):
        if not filename.endswith(".html"):
            continue
        with open(os.path.join(directory, filename)) as f:
            contents = f.read()
            links = re.findall(r"<a\s+(?:[^>]*?)href=\"([^\"]*)\"", contents)
            pages[filename] = set(links) - {filename}

    # Only include links to other pages in the corpus
    for filename in pages:
        pages[filename] = set(
            link for link in pages[filename]
            if link in pages
        )

    return pages


def transition_model(corpus, page, damping_factor):
    """
    Return a probability distribution over which page to visit next,
    given a current page.

    With probability `damping_factor`, choose a link at random
    linked to by `page`. With probability `1 - damping_factor`, choose
    a link at random chosen from all pages in the corpus.
    """
    distribution = dict()
    if not corpus[page]: # if page has no outgoing links
        for i in corpus.keys(): # each page in corpus has the same probability distribution
            distribution[i] = 1/len(corpus)
    else: # if page has links
        for i in corpus.keys():
            if i in corpus[page]:
                distribution[i] = (1 - damping_factor) / len(corpus) + damping_factor / len(corpus[page])
            else:
                distribution[i] = (1 - damping_factor) / len(corpus)
    return distribution

def sample_pagerank(corpus, damping_factor, n):
    """
    Return PageRank values for each page by sampling `n` pages
    according to transition model, starting with a page at random.

    Return a dictionary where keys are page names, and values are
    their estimated PageRank value (a value between 0 and 1). All
    PageRank values should sum to 1.
    """
    # Create a dict to store result
    pagerank = dict()
    for page in list(corpus.keys()):
        pagerank[page] = 0

    # The first sample is generated by choosing from a page at random.
    sample = [random.choice(list(corpus.keys()))][0]
    pagerank[sample] += 1/n

    # For each of the remaining samples, the next sample is generated from the previous sample based on the previous sampleâ€™s transition model.
    for _ in range (n-1):
        tm = transition_model(corpus=corpus, page=sample, damping_factor=damping_factor)
        sample = random.choices(population=list(corpus.keys()), weights=tm.values(),k=1)[0]
        pagerank[sample] += 1/n
    
    return pagerank


def iterate_pagerank(corpus, damping_factor):
    """
    Return PageRank values for each page by iteratively updating
    PageRank values until convergence.

    Return a dictionary where keys are page names, and values are
    their estimated PageRank value (a value between 0 and 1). All
    PageRank values should sum to 1.
    """
    N = len(corpus) # total number of pages in the corpus
    pagerank = dict()
    new_pagerank = dict()

    # assign each page a rank of 1 / N
    for page in corpus:
        pagerank[page] = 1 / N

    # repeatedly calculating new rank values based on all of the current rank values
    while True:
        for page in corpus:
            PR = 0 # PageRank value
            for link_to_page in corpus:
                # if a page has no links at all, it should be interpreted as having one link for every page in the corpus (including itself).
                if len(corpus[link_to_page]) == 0:
                    PR += (pagerank[link_to_page]) / len(corpus)
                # else: check if page links to our page
                if page in corpus[link_to_page]:
                    PR += (pagerank[link_to_page] / len(corpus[link_to_page]))
            PR *= damping_factor
            PR += (1 - damping_factor) / N

            new_pagerank[page] = PR

        # repeat until no PageRank value changes by more than 0.001
        difference = max([abs(new_pagerank[i] - pagerank[i]) for i in pagerank])
        if difference < 0.001:
            break
        else:
            pagerank = new_pagerank.copy()

    return pagerank


if __name__ == "__main__":
    main()

